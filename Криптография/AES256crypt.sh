#!/bin/bash

# Скрипт шифрования/расшифровки файла или каталога с файлами
#
# Автор: https://github.com/patsuckow/
# 2017-2023г.
#
# Замечание:
# В силу неумения утилитой tar обрабатывать директории с пробелами в именах - пути к файлам/директориям которые нужно зашифровать - не должны содержать пробелы!
# Т.е. путь типа нижеследующих - будут некорректны! : 
# '/home/alex/Рабочий стол/1.txt'
# или
# '/home/alex/My Folder'
# "Корректный" путь, без пробелов:
# /home/alex/My_Folder
#
# Пример использования:
# Зашифровать каталог с файлами
# $ ./AES256crypt.sh enc ~/My_Folder
#
# Расшифровать архив-каталог
# $ ./AES256crypt.sh dec ~/My_Folder.tar.dec
#
# Зашифровать файл
# $ ./AES256crypt.sh enc ~/My_File
#
# Расшифровать файл
# $ ./AES256crypt.sh dec ~/My_File.dec

# Функция для шифрования файлов
fileEncrypt() {
  local path=$1
  # Зашифруем файл используя openssl и алгоритм симметричного шифрования AES-256-CBC с длиной ключа 256 бит, `-salt`- добавить "соли" к ключу шифрования
  # (openssl попросит 2 раза ввести пароль для создаваемого файла, enter aes-256-cbc encryption password:)
  openssl enc -aes-256-cbc -salt -in "$path" -out "$path.enc"
  # Проверяем код возврата предыдущей команды (`$?`). Код возврата 0 означает успешное выполнение команды, а любое другое значение указывает на ошибку.
  if [[ $? -ne 0 ]]; then echo 'При шифровании что-то пошло не так.'; exit 1; fi
  echo -e "\nШифрование прошло успешно, получен файл $path.enc"
}

# Функция для расшифровки файлов
fileDecrypt() {
  local file=$1
  local new_file=$2
  # (openssl попросит ввести пароль от файла: enter aes-256-cbc decryption password:)
  openssl enc -aes-256-cbc -d -in $file -out $new_file
  if [[ $? -ne 0 ]]; then echo 'При расшифровке что-то пошло не так.'; exit 1; fi
  echo "Расшифровка прошла успешно, получен файл $new_file"
}

# Функция архивации каталога с файлами
tar_rf(){
  local dir_name=$1
  tar -rf "$dir_name.tar" $dir_name
  if [[ $? -ne 0 ]]; then echo 'При архивации что-то пошло не так.'; exit 1; fi
}

# Функция разархивации каталога с файлами
tar_xf(){
  local dir_name=$1
  echo 'Распаковка архива...';
  tar -xf $new_file;
  if [[ $? -ne 0 ]]; then echo 'При распаковке архива что-то пошло не так.'; exit 1; fi
  echo 'Успешно.'
}

# Удаление исходного файла/каталога
deleting_source(){
  local name=$1
  rm -rf $name
  echo "Исходный файл $name удалён."
}

# Проверяем сколько аргументов передано скрипту
if [[ $# -ne 2 ]]; then echo 'Переданно неправильное кол-во аргументов!'; exit 1; fi
# Проверяем корректность переданного пути (существует ли он)
if [[ !(-e $2) ]]; then echo 'Переданный аргумент - путь к файлу(директории) либо не существует либо при его написании допущена ошибка!'; exit 1; fi
# Проверяем, указанный путь - это должен быть путь к файлу или директории с файлами
if [[ !((-f $2) || (-d $2)) ]]; then echo 'Указанный путь - это должен быть путь к файлу или директории с файлами'; exit 1; fi

# Если нужно зашифровать файл/каталог с файлами
if [[ (-n $1) && ($1 == 'enc') ]]
then
  # Сохраняем переданный путь в переменную
  path=$2
  # переходим из каталога где запущен скрипт, в каталог с файлом/папкой c файлами которые нужно зашифровать
  cd `dirname $2`

  # Eсли указанный путь - это директория с файлами, то архивируем каталог с файлами, если это файл - пропускаем архивацию
  if [[ -d $path ]]
  then
    # получаем имя каталога, который нужно заархивировать перед шифрованием
    dir_name=`basename $2`
    # Архивируем каталог с файлами, получая файл-архив
    tar_rf $dir_name
    # путь к созданному файлу архива
    path="$dir_name.tar"
  fi

  # Шифруем файл, передав путь к нему
  fileEncrypt $path

  # Так как шифрование прошло успешно, то удалим незашифрованный файл/каталог
  deleting_source $2

  # Если есть файл архива с именем "$dir_name.tar", удаляем его
  if [[ (-e $path) && (-f $path) ]]; then rm $path; fi
fi

# Если нужно расшифровать файл/каталог с файлами
if [[ (-n $1) && ($1 == 'dec') ]]
then
  # Удалим последние 4 символа из названия шифрованного файла $1, т.е. удаляем '.dec'
  new_file=${2%%????} # В даном случае 2 - это не число, а имя переменной - второго аргумента!
  # Раcшифруем файл, передав путь к нему и имя нового файла
  fileDecrypt $2 $new_file

  # Так как расшифровка прошла успешно, то удалим зашифрованный файл/каталог
  deleting_source $2

  # Если после расшифровки перед нами tar архив, то распакуем его
  if [[ `echo $new_file | tail -c 5` == '.tar' ]]
  then
    cd `dirname $new_file` # имя изначальной папки, заходим в неё
    # распаковка архива
    tar_xf $new_file 
    rm $new_file; echo "Файл архива $new_file удалён."
    echo "Расшифрованный каталог - ${new_file%%????}"
  fi 
fi
